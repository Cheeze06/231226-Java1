
public class Ch02 {

	public static void main(String[] args) {
		// 01 진수
		// 진수(진법) : 정수를 표현할 때 사용되는 수 표현 방법
		// Java는 기본적으로 10진수를 사용, 정수 리터럴을 작서할 떄는 10진수가 기본적으로 사용됨.
		
		//0b	: 2진수
		//		: 10진수
		//0		: 8진수
		//0x	: 16진수

		// 컴퓨터는 내부적으로 모든 값을 이진(binary) 데이터로 저장하고 있음
		// 2진수로 변환된 데이터 하나를 담는 최소 공간단위. == 비트(bit)
		// 우리가 보는 것은 다양한 진법의 리터럴을 통해 그 값을 해석한것 뿐임. == 형식 지정자(서식문자)에 맞게 표현

//		###
//		1 byte == 8 bit
//		###
		
//		0 111 1111 ==> 0(최소) - 255(최대)
	
//		10진수 -> 2진수 문제
//		10	-> 1010
//		59	-> 111011
//		160	-> 10100000
		
//		2진수 -> 10진수 문제
//		1100 0001	-> 193
//		0101 1101	-> 93
//		1010 1110	-> 174
		
		
		// ## 보수의 개념 ##
		// 보수란? : 각 자리의 숫자의 합이 일정한 수가 되게 하는 수
		// 즉 어느 수에 대한 반전, 뒤집는 개념
		
		// 1에 대한 10의 보수 = 9
		// 2에 대한 10의 보수 = 8
		// 3에 대한 10의 보수 = 7
		// ...
		// 일정 수를 기준으로 반대되는 수 == 보수
		
		//----------------------
		// 33에 대한 9의 보수 = 66
		// 33에 대한 10의 보수 = 67
		//----------------------
		
		// n의 보수 == n - 1의 보수에서 1을 더했을 때 '자릿수가 올라가는 수'
		
		// 1의 보수를 간단하게 구하는 법
		// 해당 2진수를 반전시키면 끝.
		// 0000 0011 - 2진수
		// 1111 1100 - 1의 보수
		
		// 2의 보수를 간단하게 구하는 법
		//1의 보수에 1을 더하면 끝.
		// 1111 1100 - 1의 보수
		//+0000 0001 - 1
		// 1111 1101 - 2의 보수

//		의 보수에서 1을 더한 값과 같다.

		//각 10진수를 2진수로 변환 후에 1의 보수와 2의 보수를 구해보자
		
		// 10	->	0000 1010 (2진수)
		//			1111 0101 (1의 보수)
		//		   +0000 0001
		//---------------------
		// -10		1111 0110 (2의 보수)
		
		
		// 8	->	0000 1000 (2진수)
		//			1111 0111 (1의 보수)
		//		   +0000 0001
		//---------------------
		// -8		1111 1000 (2의 보수)
					
		
		
	}

}
