package Ch13;

import java.util.Scanner;

public class Ch13 {
	public static void main(String[] args) {
		
		// 01 클래스 (자료형)
		// 동일한 종류의 객체를 구현하기 위해 객체의 속성/기능을 미리 선언한 자료형, 설계도 혹은 틀을 의미함.
		
		// 클래스의 구성
		// 1. 데이터(속성), 멤버변수
		// 2. 해당 데이터를 처리하는 메서드(메서드 == 기능), 멤버함수
		
		// 클래스를 정의하면 메모리 공간을 차지하지 않지만
		// 객체가 생성되는 순간 클래스에서 선언한 속성/기능을 가진 공간이 형성됨.
		
		
		// Ex) 'Person' 이라는 클래스에는
				// 여러가지의 속성과 기능을 가지고 있을 수 있다.(내가 만들기 나름)
				// String name;				// 이름을 담아줄 멤버변수
				// int age;					// 나이를 담아줄 멤버변수
				// String address;			// 주소를 담아줄 멤버변수
		
		
//		 	void hello() {			// 인사하는 멤버함수(기능 == 메서드)
//				 	System.out.println(name + "이/가 인사를 합니다");
//			 }
		
		
		// ==> 하나의 Person이라는 클래스로부터 여러 명의 사람 객체(인스턴스)를 만들 수 있음.
				// 예를 들자면 홍길동이라는 사람에 대한 이름, 나이, 주소, 인사 기능도 있을꺼고
				// 		   서길동이라는 사람에 대한 이름, 나이, 주소, 인사 기능도 있을꺼고
				//		   남길동이라는 사람에 대한 이름, 나이, 주소, 인사 기능도 있을테니깐.
				// 각각 가지는 이름과 나이, 주소값이 다를테니깐.(물론 같을 수도 있음. 같아도 상관 X)
		
		
		
		 
		// 02 객체(Object) - 존재하는 사물(Object)
		// 클래스로부터 만들어진 객체를 클래스의 인스턴스(instance)라고 함.
		// Ex) 사람 객체는 사람(Person) 클래스의 인스턴스임.
		
		// "객체가 생성된다" 의 의미 == "메모리 공간을 차지한다."
		
		// ## 인스턴스화 (Instantiation) ## 
		// 클래스를 이용하여 객체를 생성하는 과정을 의미 
		// new 키워드를 사용하여 클래스를 인스턴스화할 수 있음.'
		
		
		
		
		// ## 객체 선언 방법 ##
		// Person 사람1 = new Person();
		// 클래스자료형 참조변수명 = new예약어 클래스생성자;
		
		// 참조변수 (Reference Variable) : 객체를 가리키는 변수를 의미
		
		
		// 일단 잘 모르겠으면 사용법을 익혀야함!
		// 클래스명 변수명 = new 클래스명(); 
		// ==> 이 형식으로 일단 암기하자! 
		
		
		
		// 03 객체의 기본 구조
		
		// 1. 멤버변수 (Member Variable) : 클래스 내부에 선언된 변수, 즉 객체의 속성을 나타냄
		// Ex) Person 클래스의 name, age, address에 해당
		
		// 2. 메서드 (Method) : 클래스 내부에 정의된 함수, 즉 객체의 기능(동작)을 나타냄.
		// Ex) Person 클래스의 hello()는 메서드임.
		// 이를 멤버 함수라고 부르기도 함.
		
		// 나무 존재? x (나무와 다른 대상과 특징적인 부분을 구별하기 위해 있는것)
		// 자동차 존재? x
		// 사람 존재? x 
		
		// 04 객체 지향 프로그래밍(Object Oriented Programming, OOP)
		// 객체(Object)에 대한 모델링을 중심으로 하는 프로그래밍 방식
		// 코드를 객체라는 단위로 구성, 객체들 간의 상호 작용을 통해 프로그램을 구축하는 것을 목표
		
		
//		6.객체 지향의 장점:
//
//		코드의 재사용성이 높아져 개발 속도를 향상시킵니다.
//		코드의 유지보수성이 향상됩니다.
//		객체 간의 관계를 명확하게 표현할 수 있습니다.
//		소프트웨어의 확장성과 유연성이 높아집니다
		
		
		
		
		
		//4 기본코드 해석
		
		//자바의 메모리 영역
		//1) 스택영역			: {} 메서드 내에서 생성(int, double)
		//2) 클래스(메서드)영역	: 공유 메모리 영역(생성자메서드, 일반메서드, static 메서드, static 변수)
		//3) 힙영역			: 객체 저장 영역(new 예약어 사용시 할당)
		
		// ==> 메모리를 구분하는 이유는 효율적인 메모리 관리 및 동작성 때문임.
		
		
		
		
		
		
	}

}
